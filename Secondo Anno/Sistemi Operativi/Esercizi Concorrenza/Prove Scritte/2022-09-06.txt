/*
Esercizio c.1: I bit di un numero intero rappresentano condizioni di un sistema. 
Se lo stato attuale è 6 (0110) vuole dire che attualmente sono vere le condizioni 2 (0010) e 4 (0100).
Scrivere un monitor bitcond che fornisca le seguenti procedure entry: 

    void set(int bit2set); accende nello stato attuale i bit di bit2set 

    void unset(int bit2unset) spegne nello stato attuale i bit di bit2unset 

    void statuswait(int bit2wait) attende che lo stato attuale soddisfi tutti le condizioni indicate in bit2wait 
    (cioè che tutti i bit in bit2wait siano accesi nello stato attuale).

Le richieste statuswait devono essere servite in ordine FIFO 
(cioè un processo anche se sono presenti tutte le condizioni necessarie deve attendere 
se un processo che ha chiamato statuswait prima è in attesa).
Lo stato iniziale è zero (nessuna risorsa disponibile)
*/

monitor bitcond{

    bool alreadyWaiting;
    int currentCond;
    condition ok2check;
    condition conditionWaiting;

    bitcond(){
        currentCond = 0;
        aloreadyWaiting = false;
    }

    procedure entry set(int bit2set){

        //Bitwise or
        bit2set |= currentCond;

        //Try to unlock stucked
        if(alreadyWaiting)
            conditionWaiting.signal()
    }


    procedure entry unset(int bit2unset){

        //Negate unset and then bitwise and
        currentCond  &= ~bit2unset;
    }

    void statuswait(int bit2wait){

        //Qualcuno sta giá aspettando dei bit
        if(alreadyWaiting)
            ok2check.wait()

        while(true){

            //Rimani qui finché non é rispettata la condizione
            if(!respectCondition(bit2wait))
                conditionWaiting.wait();
        }

        //Condizione rispettata, sblocca il successivo
        ok2check.signal();

    }


    bool respectCondition(int required){


        int requiredBits[4] = splidDecToBitArray();
        int currentBits[4] = splitDecToBitArray();

        foreach(bit in requiredBits){
            if(requiredBits[i] == 1 && currentBits[i] == 0)
                return false;
        }

        return true;

    }

}

//es.2

int total = 0;
int totalSumProcesses = 0;
semaphore mutex(1);
semaphore unlockSumStop(0);

void sumstop(int v){

    //Aspetta mutex
    mutex.P();

    total += v;
    totalSumProcesses++;

    //Abbiamo mutex
    mutex.V();
    unlockSumStop.P(); //Aspetta che sumgo sblocchi

    mutex.P();
    totalSumProcesses--;


    if(totalSumProcesses != 0)
        unlockSumStop.V();

    mutex.V();
}

int sumgo(){

    mutex.P();

    unlockSumStop.V();
    localTotal = total;
    total = 0;
    mutex.V();
    return localTotal;
}