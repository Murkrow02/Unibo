/*
Scrivere il monitor delay che fornisce due procedure entry:
    int wait_tick(int nticks)
    void tick(void)

La procedure entry tick è pensata per essere richiamata periodicamente (es. ogni secondo o ora o giorno) da un processo.
Quando un processo chiama la wait_tick deve attendere un numero di chiamate della tick pari al parametro nticks. 
Per esempio se un processo chiama wait_tick(2) deve fermarsi e verrà riattivato alla seconda successiva chiamata di tick. 
La funzione wait_tick ha come valore di ritorno il numero di processi che erano bloccati al momento della tick che ha sbloccato il chiamante. 
Esempio: P chiama wait_tick(2) e si blocca. Q chiama wait_tick(3) e si blocca. T chiama tick() non succede nulla. R chiama wait_tick(2) e si blocca. 
T chiama tick(), viene sbloccata la wait_tick di P e il valore ritornato è 3. 
T chiama tick(), vengono sbloccate le wait_tick di Q e R e il valore ritornato per entrambi i processi è 2
*/

monitor delay{

    min_heap waiting = new min_heap(); 

    int wait_tick(int nticks){
        
        //Aggiungi a coda ordinata una nuova condizione
        condition cond = new condition();
        waiting.enqueue(nticks,cond);

        //Aspetta che i ticks scendano a 0
        cond.wait()

        //I ticks sono scesi a 0
        return waiting.size();

    }


    void tick(){

        foreach (item in waiting){
            item.remainingTicks--;
            if(item.remainingTicks == 0){
                waiting.dequeue();
                item.cond.signal();
            }
        }


    }

}

/*
Esercizio c.2: Un servizio di message passing asincrono non fifo (nfasend/nfarecv) consegna in tempo finito tutti i messaggi spediti 
ma non è garantito che i messaggi vengano ricevuti nell'ordine nel quale sono stati spediti.

    void nfasend(msg_t msg, pid_t dest)
    msg_t nfarecv(pid_t sender)

Dato un servizio di message passing asincrono non fifo scrivere una libreria che implementi il servizio di message passing asincrono fifo:

    void asend(msg_t msg, pid_t dest)
    msg_t arecv(pid_t sender)

Nota: sia il servizio dato (non fifo) sia quello da implementare (fifo) consentono la ricezione solo da mittente specificato (non supportano ANY/*).
*/

